# -*- coding: utf-8 -*-
"""Tienda_solar.ipynb

Automatically generated by Colab.


# Recomendador de Productos Solares con Agente Interactivo (Nivel B√°sico)

Este proyecto implementa un **sistema de recomendaci√≥n interactivo** para productos de energ√≠a solar, usando:

- **Python, Pandas y Scikit-Learn**
- **TF-IDF + Cosine Similarity**
- **Agente conversacional con inputs del usuario**

### Funcionalidades:
‚úî Filtrar por categor√≠a
‚úî Ajustar por presupuesto m√°ximo
‚úî Seleccionar palabras clave deseadas
‚úî Recomendaciones inteligentes usando similitud de contenido

---
"""

# Instalaci√≥n de dependencias necesarias
!pip install nltk
import nltk
nltk.download('stopwords')

# Importaci√≥n de librer√≠as
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.corpus import stopwords

# Montar Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Ruta del archivo Excel del dataset
file_path = '/content/drive/MyDrive/MachineLearning/productos_energia_solar.xlsx'
#file_url = 'https://docs.google.com/spreadsheets/d/1mXhvMuB2V1HTCUaHjRzf2iBRKMXBvJHH/edit?usp=sharing&ouid=105664340508397818769&rtpof=true&sd=true'

# Leer dataset
df = pd.read_excel(file_path)
df.head()

# Crear columna combinada para an√°lisis sem√°ntico
df['contenido'] = df['descripcion'] + ' ' + df['palabras_clave'] + ' ' + df['categor√≠a']

# Crear matriz TF-IDF con stopwords en espa√±ol
spanish_stopwords = stopwords.words('spanish')
vectorizer = TfidfVectorizer(stop_words=spanish_stopwords)
tfidf_matrix = vectorizer.fit_transform(df['contenido'])

# Crear matriz de similitud
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Agente interactivo para recomendar productos solares
def agente_recomendador_solar():
    print("üîÜ ¬°Hola! Soy tu asistente para encontrar productos solares ideales.")

    while True:
        categoria = input("\n¬øQu√© tipo de producto buscas? (o escribe 'salir' para terminar): ").strip()
        if categoria.lower() == 'salir':
            print("¬°Gracias por usar el asistente solar! ‚òÄÔ∏è")
            break

        if categoria not in df['categor√≠a'].unique():
            print("‚ùå Categor√≠a no encontrada. Intenta con otra.")
            continue

        presupuesto = input("¬øCu√°l es tu presupuesto m√°ximo (en COP)? (o presiona Enter para omitir): ").strip()
        presupuesto = int(presupuesto) if presupuesto.isdigit() else None

        palabras = input("¬øQu√© caracter√≠sticas deseas? (Ej.: litio, inversor, techo, separados por coma): ").strip().lower()
        texto_usuario = categoria + ' ' + palabras

        resultados = df[df['categor√≠a'] == categoria]
        if presupuesto:
            resultados = resultados[resultados['precio'] <= presupuesto]

        if resultados.empty:
            print("‚ö†Ô∏è No encontramos productos con esos filtros. Intenta ajustarlos.")
            continue

        vector_usuario = vectorizer.transform([texto_usuario])
        similitudes = cosine_similarity(vector_usuario, vectorizer.transform(resultados['contenido'])).flatten()
        resultados['similitud'] = similitudes
        recomendaciones = resultados.sort_values(by='similitud', ascending=False).head(5)

        print("\n‚úÖ Productos recomendados:")
        for i, row in recomendaciones.iterrows():
            print(f"\nüîã Producto: {row['nombre']}")
            print(f"üí∞ Precio: {row['precio']} COP")
            print(f"üì¶ Categor√≠a: {row['categor√≠a']}")
            print(f"üìù Descripci√≥n: {row['descripcion']}")

        continuar = input("\n¬øQuieres buscar otro producto? (s√≠/no): ").strip().lower()
        if continuar != 's√≠':
            print("¬°Hasta pronto! üåû")
            break

# Ejecutar agente
agente_recomendador_solar()